/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

0.9.8 - @tomw - Bugfix for windowShade and switch parameters.
0.9.5 - @tomw - Swallow unknown API replies instead of using "unknown".
0.9.4 - @tomw - Add SwitchLevel (dimmer) functionality for ease-of-use.  setLevel functions as an alias for setPosition.
0.9.2 - @tomw - More Curtain debugging.
0.9.1 - @tomw - Updated Curtain driver after debugging.  Thanks @dadarkgtprince for testing and feedback.
0.9.0 - @tomw - Initial release.

*/

metadata
{
    definition(name: "SwitchBot Curtain", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Initialize"
        capability "Refresh"
        capability "RelaySwitch"
        capability "Switch"
        capability "SwitchLevel"
        capability "WindowShade"
    }
}

def initialize()
{
    sendEvent(name: "position", value: "unknown")
    sendEvent(name: "level", value: "unknown")
    sendEvent(name: "switch", value: "unknown")
    sendEvent(name: "windowShade", value: "unknown")
    
    refresh()
}

def refresh()
{
    unschedule(refresh)
    
    try
    {
        def id = getParent()?.getId(device.getDeviceNetworkId())
        def respData = getParent()?.readDeviceStatus(id)
        
        if(!respData)
        {
            return
        }
        
        if(null != respData.body?.slidePosition)
        {
            /* homebridge compatibility
            sendEvent(name: "position", value: 100-respData.body.slidePosition)
            sendEvent(name: "level", value: 100-respData.body.slidePosition)
            */
            sendEvent(name: "position", value: 100-respData.body.slidePosition)
            sendEvent(name: "level", value: 100-respData.body.slidePosition)
        }
        
        def windowShade = "unknown"
        def switchState = "unknown"
        if(respData.body?.moving)
        {
            // if moving, get status again to see if we can figure out which direction
            def respData2 = getParent()?.readDeviceStatus(id)
            if(null != respData2?.body?.slidePosition && null != respData.body.slidePosition)
            {
                /* homebridge compatibility
                windowShade =
                    (respData2.body.slidePosition.toInteger() > respData.body.slidePosition.toInteger()) ? "closing" : "opening"
                */
                windowShade =
                    (respData2.body.slidePosition.toInteger() < respData.body.slidePosition.toInteger()) ? "closing" : "opening"
                switchState = "on"                
            }
            
            // refresh again so that we get the final state
            runIn(2, refresh)
        }
        else if(null != respData.body?.slidePosition)
        {
            switch(respData.body.slidePosition.toInteger())
            {
                /* homebridge compatibility
                case 95..100:
                    windowShade = "closed"
                    switchState = "off"
                    break
                case 0..5:
                    windowShade = "open"
                    switchState = "on"
                    break
                */
                case 95..100:
                    windowShade = "open"
                    switchState = "on"
                    break
                case 0..5:
                    windowShade = "closed"
                    switchState = "off"
                    break
                default:
                    windowShade = "partially open"
                    switchState = "on"
            }
        }
        
        if("unknown" != windowShade)
        {
            // only send valid new value
            sendEvent(name: "windowShade", value: windowShade)
        }
        if("unknown" != switchState)
        {
            // only send valid new value
            sendEvent(name: "switch", value: switchState)
        }
    }
    catch (Exception e)
    {
        log.debug "refresh() failed: ${e.message}"
    }
}

def on()
{
    open()
}

def off()
{
    close()
}

def open()
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        def respData = getParent()?.writeDeviceCommand(id, "turnOn", "default", "command")
        runIn(2, refresh)
    }
}

def close()
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        def respData = getParent()?.writeDeviceCommand(id, "turnOff", "default", "command")
        runIn(2, refresh)
    }
}

def setPosition(position)
{
    def id = getParent()?.getId(device.getDeviceNetworkId())
    if(id)
    {
        /* homebridge compatibility
        def respData = getParent()?.writeDeviceCommand(id, "setPosition", "0,ff,${100-position}", "command")
        */
        def respData = getParent()?.writeDeviceCommand(id, "setPosition", "0,ff,${100-position}", "command")
        runIn(2, refresh)
    }    
}

def setLevel(level, duration = null)
{
    setPosition(level)    
}
